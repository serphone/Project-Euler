from pyler import EulerProblem


def fib_even(n):
    if n == 0:
        return 2
    elif n == 1:
        return 8
    else:
        return 4 * fib_even(n - 1) + fib_even(n - 2)


class Problem0002(EulerProblem):
    """
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5,
    8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci
    sequence whose values do not exceed four million, find the sum of the even-
    valued terms.
    """

    problem_id = 2
    simple_input = 100
    simple_output = 44
    real_input = 4000000

    def solver(self, input_val):
        """Only one every three terms is even."""
        result = 0
        a, b = 1, 1  # First two terms in Fib sequence
        c = a + b
        while c < input_val:
            result += c
            a = b + c
            b = c + a
            c = a + b
        return result

    def solver2(self, input_val):
        fib_seq = [1, 1]
        while fib_seq[-1] + fib_seq[-2] < input_val:
            fib_seq.append(fib_seq[-1] + fib_seq[-2])

        return sum(x for x in fib_seq if x % 2 == 0)

    def solver3(self, input_val):
        x = 0
        fib_sum = 0
        fib_x = fib_even(x)
        while fib_x <= input_val:
            fib_sum += fib_x
            x += 1
            fib_x = fib_even(x)
        return fib_sum


if __name__ == "__main__":
    import unittest

    unittest.main()
